from sistema_transporte import SistemaTransporte
from planificador import Planificador

# Importar gr√°ficos si matplotlib est√° disponible
try:
    from graficos import generar_todos_los_graficos, grafico_comparacion_caminos, grafico_comparacion_tiempos
    GRAFICOS_DISPONIBLES = True
except ImportError:
    print("Matplotlib no disponible - gr√°ficos deshabilitados")
    GRAFICOS_DISPONIBLES = False


def procesar_solicitudes(sistema, planificador):
    """
    Procesa todas las solicitudes generando itinerarios optimizados por tiempo y costo.
    Genera gr√°ficos comparativos si matplotlib est√° disponible.
    """
    print("\n" + "="*60)
    print("PROCESANDO SOLICITUDES")
    print("="*60)
    
    resultados_tiempo = {}
    resultados_costo = {}
    
    for i, solicitud in enumerate(sistema.solicitudes, 1):
        print(f"\n{'='*20} SOLICITUD {i}/{len(sistema.solicitudes)} {'='*20}")
        print(f"ID: {solicitud.id_carga}")
        print(f"Carga: {solicitud.peso_kg} kg")
        print(f"Ruta: {solicitud.origen.nombre} -> {solicitud.destino.nombre}")
        
        # Optimizaci√≥n por tiempo
        print(f"\nOPTIMIZACI√ìN POR TIEMPO:")
        print("-" * 40)
        try:
            itinerario_tiempo = planificador.generar_itinerario(solicitud, "tiempo")
            if itinerario_tiempo:
                print("Ruta encontrada:")
                print(itinerario_tiempo)
                resultados_tiempo[f"{solicitud.id_carga}_tiempo"] = itinerario_tiempo
                
                # Gr√°ficos para primera solicitud
                if i == 1 and GRAFICOS_DISPONIBLES:
                    try:
                        print(f"\nGenerando gr√°ficos por tiempo...")
                        generar_todos_los_graficos(itinerario_tiempo, f"{solicitud.id_carga} - Por Tiempo")
                    except Exception as e:
                        print(f"Error en gr√°ficos: {e}")
            else:
                print("No se encontr√≥ ruta v√°lida")
        except Exception as e:
            print(f"Error: {e}")
            import traceback
            traceback.print_exc()
        
        # Optimizaci√≥n por costo
        print(f"\nOPTIMIZACI√ìN POR COSTO:")
        print("-" * 40)
        try:
            itinerario_costo = planificador.generar_itinerario(solicitud, "costo")
            if itinerario_costo:
                print("Ruta encontrada:")
                print(itinerario_costo)
                resultados_costo[f"{solicitud.id_carga}_costo"] = itinerario_costo
                
                # Gr√°ficos para primera solicitud
                if i == 1 and GRAFICOS_DISPONIBLES:
                    try:
                        print(f"\nGenerando gr√°ficos por costo...")
                        generar_todos_los_graficos(itinerario_costo, f"{solicitud.id_carga} - Por Costo")
                    except Exception as e:
                        print(f"Error en gr√°ficos: {e}")
            else:
                print("No se encontr√≥ ruta v√°lida")
        except Exception as e:
            print(f"Error: {e}")
            import traceback
            traceback.print_exc()
        
        # Comparaci√≥n directa entre ambas optimizaciones
        if (f"{solicitud.id_carga}_tiempo" in resultados_tiempo and 
            f"{solicitud.id_carga}_costo" in resultados_costo):
            
            print(f"\nCOMPARACI√ìN:")
            print("-" * 40)
            tiempo_it = resultados_tiempo[f"{solicitud.id_carga}_tiempo"]
            costo_it = resultados_costo[f"{solicitud.id_carga}_costo"]
            
            print(f"TIEMPO  - Duraci√≥n: {tiempo_it.obtener_tiempo_total_formateado()}, Costo: ${tiempo_it.costo_total:.2f}")
            print(f"COSTO   - Duraci√≥n: {costo_it.obtener_tiempo_total_formateado()}, Costo: ${costo_it.costo_total:.2f}")
            
            # Determinar mejor opci√≥n
            if tiempo_it.tiempo_total < costo_it.tiempo_total:
                print(f"M√°s r√°pido: Optimizaci√≥n por TIEMPO ({tiempo_it.obtener_tiempo_total_formateado()})")
            else:
                print(f"M√°s r√°pido: Optimizaci√≥n por COSTO ({costo_it.obtener_tiempo_total_formateado()})")
                
            if tiempo_it.costo_total < costo_it.costo_total:
                print(f"M√°s barato: Optimizaci√≥n por TIEMPO (${tiempo_it.costo_total:.2f})")
            else:
                print(f"M√°s barato: Optimizaci√≥n por COSTO (${costo_it.costo_total:.2f})")
        
        print("\n" + "="*60)
    
    # Gr√°ficos comparativos finales
    if GRAFICOS_DISPONIBLES and (len(resultados_tiempo) > 1 or len(resultados_costo) > 1):
        try:
            print(f"\nGenerando gr√°ficos comparativos...")
            if resultados_tiempo:
                grafico_comparacion_tiempos(resultados_tiempo)
            if resultados_costo:
                grafico_comparacion_caminos(resultados_costo)
        except Exception as e:
            print(f"Error en gr√°ficos comparativos: {e}")


def mostrar_estadisticas_detalladas(sistema):
    """
    Muestra estad√≠sticas detalladas del sistema cargado.
    """
    print(f"\nESTAD√çSTICAS DETALLADAS:")
    print("-" * 40)
    
    stats = sistema.obtener_estadisticas()
    
    print(f"Red de transporte:")
    print(f"  ‚Ä¢ Nodos: {stats['total_nodos']}")
    print(f"  ‚Ä¢ Conexiones: {stats['total_conexiones']}")
    
    print(f"\nConexiones por modo de transporte:")
    for modo, cantidad in stats['conexiones_por_tipo'].items():
        porcentaje = (cantidad / stats['total_conexiones']) * 100
        print(f"  ‚Ä¢ {modo.capitalize()}: {cantidad} ({porcentaje:.1f}%)")
    
    print(f"\nSolicitudes de transporte:")
    print(f"  ‚Ä¢ Total: {stats['total_solicitudes']}")
    
    peso_stats = stats['solicitudes_por_peso']
    total_solicitudes = sum(peso_stats.values())
    if total_solicitudes > 0:
        print(f"  ‚Ä¢ Cargas ligeras (<10 ton): {peso_stats['ligeras']} ({(peso_stats['ligeras']/total_solicitudes)*100:.1f}%)")
        print(f"  ‚Ä¢ Cargas medianas (10-50 ton): {peso_stats['medianas']} ({(peso_stats['medianas']/total_solicitudes)*100:.1f}%)")
        print(f"  ‚Ä¢ Cargas pesadas (>50 ton): {peso_stats['pesadas']} ({(peso_stats['pesadas']/total_solicitudes)*100:.1f}%)")


def validar_sistema(sistema):
    """
    Valida la integridad del sistema y reporta posibles problemas.
    """
    print(f"\nVALIDACI√ìN DEL SISTEMA:")
    print("-" * 40)
    
    errores = sistema.validar_integridad()
    
    if not errores:
        print("‚úì Sistema validado correctamente")
        print("‚úì Todos los nodos est√°n correctamente referenciados")
        print("‚úì Todas las conexiones son v√°lidas")
        return True
    else:
        print(f"‚ö†Ô∏è  Se encontraron {len(errores)} problemas:")
        for error in errores:
            print(f"  ‚Ä¢ {error}")
        return False


def main():
    """
    Funci√≥n principal: carga datos, crea planificador y procesa solicitudes.
    Maneja errores comunes como archivos faltantes.
    """
    print("="*50)
    print("SISTEMA DE TRANSPORTE - INICIANDO")
    print("="*50)
    
    try:
        # Crear sistema y cargar datos
        print("Inicializando sistema de transporte...")
        sistema = SistemaTransporte()
        
        print("Cargando datos desde archivos CSV...")
        sistema.cargar_nodos('nodos.csv')
        sistema.cargar_conexiones('conexiones.csv')
        sistema.cargar_solicitudes('solicitudes.csv')
        
        # Mostrar informaci√≥n del sistema
        sistema.mostrar_resumen()
        mostrar_estadisticas_detalladas(sistema)
        
        # Validar integridad del sistema
        if not validar_sistema(sistema):
            print("\n‚ö†Ô∏è  Se detectaron problemas en el sistema.")
            print("El procesamiento continuar√°, pero algunos resultados pueden ser incorrectos.")
        
        # Verificar conectividad
        sistema.verificar_conectividad()
        
        # Crear planificador y procesar solicitudes
        print(f"\nCreando planificador...")
        planificador = Planificador(sistema)
        print(f"‚úì Planificador listo con {len(planificador.vehiculos_disponibles)} tipos de veh√≠culos")
        
        # Exportar resumen detallado
        try:
            sistema.exportar_resumen("resumen_ejecucion.txt")
        except Exception as e:
            print(f"Advertencia: No se pudo exportar resumen: {e}")
        
        # Procesar todas las solicitudes
        procesar_solicitudes(sistema, planificador)
        
        print(f"\n‚úì PROCESAMIENTO COMPLETADO EXITOSAMENTE")
        print("="*50)
        
        # Mostrar resumen final
        print(f"\nRESUMEN FINAL:")
        print(f"‚Ä¢ Nodos procesados: {len(sistema.nodos)}")
        print(f"‚Ä¢ Conexiones cargadas: {len(sistema.conexiones)}")
        print(f"‚Ä¢ Solicitudes procesadas: {len(sistema.solicitudes)}")
        if GRAFICOS_DISPONIBLES:
            print(f"‚Ä¢ Gr√°ficos generados: S√ç")
        else:
            print(f"‚Ä¢ Gr√°ficos generados: NO (instalar matplotlib)")
        
    except FileNotFoundError as e:
        print(f"\n‚ùå ERROR: No se encontr√≥ archivo requerido")
        print(f"Archivo faltante: {e.filename}")
        print("\nüìã ARCHIVOS NECESARIOS:")
        print("  ‚Ä¢ nodos.csv - Lista de ciudades/nodos")
        print("  ‚Ä¢ conexiones.csv - Rutas entre nodos con restricciones") 
        print("  ‚Ä¢ solicitudes.csv - Solicitudes de transporte")
        print("\nüí° SOLUCI√ìN:")
        print("  1. Verificar que los archivos est√©n en el directorio actual")
        print("  2. Revisar que los nombres de archivo sean correctos")
        print("  3. Consultar la documentaci√≥n para el formato requerido")
        
    except Exception as e:
        print(f"\n‚ùå ERROR INESPERADO: {e}")
        print("\nüîç INFORMACI√ìN DEL ERROR:")
        import traceback
        traceback.print_exc()
        
        print("\nüí° POSIBLES CAUSAS:")
        print("  ‚Ä¢ Formato incorrecto en archivos CSV")
        print("  ‚Ä¢ Referencias inconsistentes entre nodos y conexiones")
        print("  ‚Ä¢ Datos num√©ricos inv√°lidos (distancias, pesos, etc.)")
        print("  ‚Ä¢ Caracteres especiales en nombres de nodos")
        
        print("\nüõ†Ô∏è  RECOMENDACIONES:")
        print("  ‚Ä¢ Revisar el formato de los archivos CSV")
        print("  ‚Ä¢ Validar que los nombres de nodos sean consistentes")
        print("  ‚Ä¢ Verificar que todos los valores num√©ricos sean v√°lidos")


if __name__ == "__main__":
    main()